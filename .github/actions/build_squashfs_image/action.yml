name: "Build SquashFS Image"
description: "Builds a SquashFS image using Docker"
inputs:
  platform:
    description: "The platform to build for"
    required: true
  platform_suffix:
    description: "The platform suffix"
    required: true
  base_image:
    description: "The base image to use"
    required: true
  version:
    description: "The OTA client version"
    required: true
  output_squashfs:
    description: "The output SquashFS file"
    required: true
runs:
  using: "composite"
  steps:
    - name: set temporary variables
      id: set-vars
      env:
        PLATFORM_SUFFIX: ${{ inputs.platform_suffix }}
        VERSION: ${{ inputs.version }}
      shell: bash
      run: |
        echo "DOCKER_IMAGE=otaclient-${PLATFORM_SUFFIX}:${VERSION}" >> $GITHUB_ENV
        echo "DOCKER_CONTAINER=otaclient-${PLATFORM_SUFFIX}_v${VERSION}" >> $GITHUB_ENV

    - name: build docker image
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        PLATFORM: ${{ inputs.platform }}
        PLATFORM_SUFFIX: ${{ inputs.platform_suffix }}
        BASE_IMAGE: ${{ inputs.base_image }}
        VERSION: ${{ inputs.version }}
      shell: bash
      run: |
        docker build -f docker/app_img/Dockerfile --platform ${PLATFORM} \
          --build-arg=UBUNTU_BASE=${BASE_IMAGE} \
          --build-arg=OTACLIENT_VERSION=${VERSION} \
          -t ${DOCKER_IMAGE} \
          .

    - name: export squashfs image
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        DOCKER_CONTAINER: ${{ env.DOCKER_CONTAINER }}
        SQUASHFS: ${{ inputs.output_squashfs }}
      shell: bash
      # zstd squashfs kernel support is unfortunately not configured on
      #   NVIDIA Jetson BSP kernel.
      run: |
        docker create --name ${DOCKER_CONTAINER} ${DOCKER_IMAGE}
        docker export ${DOCKER_CONTAINER} | mksquashfs - ${SQUASHFS} \
            -tar -b 1M \
            -mkfs-time 1729810800 \
            -all-time 1729810800 \
            -no-xattrs \
            -all-root \
            -progress \
            -comp gzip

    - name: cleanup
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}
        DOCKER_CONTAINER: ${{ env.DOCKER_CONTAINER }}
      shell: bash
      run: |
        docker rm ${DOCKER_CONTAINER}
        docker rmi ${DOCKER_IMAGE}
