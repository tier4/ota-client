name: "Build SquashFS Image"
description: "Builds a SquashFS image using Docker"
inputs:
  platform_suffix:
    description: "The platform suffix"
    required: true
  version:
    description: "The OTA client version"
    required: true
  squashfs:
    description: "The target SquashFS file"
    required: true
runs:
  using: "composite"
  steps:
    - name: set self version as environment variable
      shell: bash
      run: |
        OTACLIENT_VERSION=${{ inputs.version }}
        MAJOR=$(echo ${OTACLIENT_VERSION} | cut -d. -f1)
        MINOR=$(echo ${OTACLIENT_VERSION} | cut -d. -f2)
        PATCH=$(echo ${OTACLIENT_VERSION} | cut -d. -f3)

        echo "MAJOR=${MAJOR:-0}" >> $GITHUB_ENV
        echo "MINOR=${MINOR:-0}" >> $GITHUB_ENV
        echo "PATCH=${PATCH:-0}" >> $GITHUB_ENV

    - name: get released versions
      shell: bash
      run: |
        RELEASES=$(curl -s https://api.github.com/repos/tier4/ota-client/releases)
        VERSIONS=$(echo "${RELEASES}" | jq -r '.[].name' | grep -oE '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^v//' | tr '\n' ' ')
        echo "VERSIONS=${VERSIONS}" >> $GITHUB_ENV

    - name: extract target versions
      shell: bash
      # extract versions that meet the the following conditions:
      # 1. include the same major version and the same or the previous minor version
      # 2. exclude the same major, minor, and patch version
      run: |
        EXTRACTED_VERSIONS=$(echo "${{ env.VERSIONS }}" | \
          tr ' ' '\n' | \
          grep -E "^${{ env.MAJOR }}\.(${{ env.MINOR }}|$(( ${{ env.MINOR }} - 1)))\.[0-9]+$" | \
          grep -vE "^${{ env.MAJOR }}\.${{ env.MINOR }}\.${{ env.PATCH }}$" | \
          tr '\n' ' ' || true)
        echo "EXTRACTED_VERSIONS=${EXTRACTED_VERSIONS}" >> $GITHUB_ENV

    - name: download and create patches for target versions
      shell: bash
      # if the release version contains "ota-client-${platform_suffix}_v${version}.squashfs" asset,
      # download the squashfs file, create a patch file then save it to the dist directory
      run: |
        for VERSION in ${{ env.EXTRACTED_VERSIONS }}; do
          ASSET_URL="https://github.com/tier4/ota-client/releases/download/v${VERSION}/ota-client-${{ inputs.platform_suffix }}_v${VERSION}.squashfs"
          if curl --output /dev/null --silent --head --fail "$ASSET_URL"; then
            OLD_SQUASHFS="ota-client-${{ inputs.platform_suffix }}_${VERSION}.squashfs"
            curl -L -o ${OLD_SQUASHFS} ${ASSET_URL} || continue

            PATCH_FILE="v${VERSION}-v${{ inputs.version }}.patch"
            zstd --patch-from=${OLD_SQUASHFS} ${{ inputs.squashfs }} -o dist/${PATCH_FILE} || continue
          fi
        done
